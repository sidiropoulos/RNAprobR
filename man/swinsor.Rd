\name{swinsor}
\alias{swinsor}
\title{
Smooth Winsorization
}
\description{
Performs sliding window Winsorization given treated GRanges generated by comp() function. It winsorizes values in windows (of a size specified by window_size) sliding by 1 nt over whole transcript length and reports mean winsorized value for each nucleotide (as well as standard deviation).
}
\usage{
swinsor(Comp_GR, winsor_level = 0.9, window_size = 71, only_top = F, nt_offset = 0, add_to)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{Comp_GR}{
GRanges object made by comp() function.
}
  \item{winsor_level}{
Winsorization level. Bottom outliers will be set to (1-winsor_level)/2 quantile and top outliers to (1+winsor_level)/2 quantile.
}
  \item{window_size}{
Size of a sliding window.
}
  \item{only_top}{
If TRUE then bottom values are not Winsorized and are set to 0.
}
  \item{nt_offset}{
How many position in the 5' direction should the signal be offset to account for the fact that reverse transcription termination occurs before site of modification.
}
  \item{add_to}{
GRanges object made by other normalization function (dtcr(), slograt(), swinsor(), compdata()) to which normalized values should be added.
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
GRanges object with "swinsor" (mean smooth-Winsor values) and "swinsor.sd" (standard deviation of smooth-Winsor values) metadata.
}
\references{
SHAPES publication. Poulsen, Kielpinski, Salama, Krogh, Vinther. In review as for 2nd Oct 2014.
}
\author{
Lukasz Jan Kielpinski
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{

dummy_euc_GR <- GRanges(seqnames="DummyRNA", IRanges(start=round(runif(100)*100), width=round(runif(100)*100+1)), strand="+", EUC=round(runif(100)*100))
dummy_comp_GR <- comp(dummy_euc_GR)
swinsor(dummy_comp_GR)

## The function is currently defined as
function (Comp_GR, winsor_level = 0.9, window_size = 71, only_top = F, 
    nt_offset = 0, add_to) 
{
    if (nt_offset < 0) {
        print("error: nt_offset must be >= 0")
        stop()
    }
    swinsor_oneRNA <- function(oneRNA_comp_df) {
        if (prod(diff(oneRNA_comp_df$Pos) == rep(1, nrow(oneRNA_comp_df) - 
            1)) == 1) {
            means_and_sds <- swinsor_vector(oneRNA_comp_df$TC, 
                window_size = window_size, winsor_level = winsor_level, 
                only_top = only_top)
            oneRNA_comp_df$swinsor <- means_and_sds[[1]][(1 + 
                nt_offset):(nrow(oneRNA_comp_df) + nt_offset)]
            oneRNA_comp_df$swinsor.sd <- means_and_sds[[2]][(1 + 
                nt_offset):(nrow(oneRNA_comp_df) + nt_offset)]
            return(oneRNA_comp_df[1:(nrow(oneRNA_comp_df) - nt_offset), 
                ])
        }
        else {
            print(paste("Check if data was properly sorted by comp() function. Problem with", 
                oneRNA_comp_df$RNAid[1]))
            stop()
        }
    }
    Comp_df <- GR2norm_df(Comp_GR)
    Comp_df[is.na(Comp_df)] <- 0
    Comp_df <- Comp_df[order(Comp_df$RNAid, Comp_df$Pos), ]
    Comp_df_by_RNA <- split(Comp_df, f = Comp_df$RNAid, drop = T)
    normalized <- do.call(rbind, lapply(Comp_df_by_RNA, FUN = swinsor_oneRNA))
    normalized <- data.frame(RNAid = normalized$RNAid, Pos = normalized$Pos, 
        nt = normalized$nt, swinsor = normalized$swinsor, swinsor.sd = normalized$swinsor.sd)
    normalized$swinsor[is.nan(normalized$swinsor)] <- NA
    normalized$swinsor.sd[is.nan(normalized$swinsor.sd)] <- NA
    if (!missing(add_to)) {
        add_to_df <- GR2norm_df(add_to)
        normalized <- merge(add_to_df, normalized, by = c("RNAid", 
            "Pos", "nt"), suffixes = c(".old", ".new"))
    }
    normalized <- normalized[order(normalized$RNAid, normalized$Pos), 
        ]
    normalized_GR <- norm_df2GR(normalized)
    normalized_GR
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
