% Generated by roxygen2 (4.0.2): do not edit by hand
\name{bedgraph2norm}
\alias{bedgraph2norm}
\title{Import bedgraph to GRanges}
\usage{
bedgraph2norm(bedgraph_file, fasta_file, txDb, bed_file,
  column_name = "bedgraph_score", add_to)
}
\arguments{
\item{bedgraph_file}{path to compatible bedgraph file}

\item{fasta_file}{path to fasta file which is used for a) choosing which
transcripts to use (transcripts absent from fasta are not reported), b)
providing sequence for to display in GRanges metadata}

\item{txDb}{TranscriptDb object with transcript definitions. Names must
match those in fasta_file}

\item{bed_file}{character containing file path to BED file with transcript
definitions. Supply txDb XOR bedfile}

\item{column_name}{How to name imported metadata in GRanges}

\item{add_to}{GRanges object made by other normalization function (dtcr(),
slograt(), swinsor(), compdata()) to which values from bedgraph should be
added.}
}
\value{
Function creates GRanges object or (if add_to specified) adds
metadata to already existing object
}
\description{
Function importing data from bedgraph format compatible with UCSC Genome
Browser to norm_GR data frame. Warning: Compatible only with bedgraph files
generated by norm2bedgraph function - bedgraph need to have 2 tracks, first
for plus strand, second for minus strand.
}
\details{
%% ~~ If necessary, more details than the description above ~~
}
\note{
%% ~~further notes~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##-- or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (bedgraph_file, fasta_file, txDb, bed_file, column_name = "bedgraph_score",
    add_to)
{
    if (missing(txDb) & missing(bed_file)) {
        print("Error: specify gene annotation")
        stop()
    }
    if (missing(fasta_file)) {
        stop("Specify fasta file")
    }
    if (!file.exists(fasta_file)) {
        stop("Fasta file not found")
    }
    add_sequence <- function(oneRNA_norm) {
        if (max(oneRNA_norm$Pos) > length(txs[[as.character(oneRNA_norm$RNAid[1])]])) {
            unexpected_length_difference <- max(oneRNA_norm$Pos) -
                length(txs[[as.character(oneRNA_norm$RNAid[1])]])
            one_gene_sequence <- unlist(strsplit(as.character(c(txs[[as.character(oneRNA_norm$RNAid[1])]],
                DNAString(paste(rep("N", unexpected_length_difference),
                  collapse = "")))[oneRNA_norm$Pos]), ""))
            print(paste("For RNA ", oneRNA_euc[1, 1], "positions outside FASTA annotation exist. N's added"))
        }
        else {
            one_gene_sequence <- unlist(strsplit(as.character(txs[[as.character(oneRNA_norm$RNAid[1])]][oneRNA_norm$Pos]),
                ""))
        }
        oneRNA_norm$nt <- one_gene_sequence
        oneRNA_norm
    }
    bedgraph_list <- import.bedGraph(bedgraph_file)
    if (length(bedgraph_list) != 2) {
        stop("Error: bedgraph file needs to contain 2 tracks, one for each strand.")
    }
    strand(bedgraph_list[[1]]) <- "+"
    strand(bedgraph_list[[2]]) <- "-"
    bedgraph_merged <- c(bedgraph_list[[1]], bedgraph_list[[2]])
    txs <- readDNAStringSet(fasta_file)
    if (missing(txDb)) {
        txDb <- BED2txDb(bed_file)
    }
    all_exons <- exonsBy(txDb, "tx", use.names = TRUE)
    my_exons <- all_exons[names(all_exons) \%in\% names(txs)]
    overlapping_transcripts <- which(countOverlaps(my_exons) >
        1)
    if (length(overlapping_transcripts) > 0) {
        print(paste("Warning: transcript", names(my_exons)[overlapping_transcripts],
            "overlaps with another transcript. Score is added to more than one RNA."))
    }
    mapped_to_tx <- map(bedgraph_merged, my_exons)
    hits_in_tx <- subjectHits(mapped_to_tx)
    hits_in_EF <- queryHits(mapped_to_tx)
    normalized <- data.frame(RNAid = names(my_exons)[hits_in_tx],
        Pos = start(ranges(mapped_to_tx)), nt = NA, bedgraph_score = score(bedgraph_merged)[hits_in_EF])
    names(normalized)[names(normalized) == "bedgraph_score"] <- column_name
    norm_by_RNA <- split(normalized, f = normalized$RNAid, drop = TRUE)
    normalized <- do.call(rbind, lapply(norm_by_RNA, FUN = add_sequence))
    if (!missing(add_to)) {
        add_to_df <- GR2norm_df(add_to)
        normalized <- merge(add_to_df, normalized, by = c("RNAid",
            "Pos", "nt"), suffixes = c(".old", ".new"))
    }
    normalized <- normalized[order(normalized$RNAid, normalized$Pos),
        ]
    normalized_GR <- norm_df2GR(normalized)
    normalized_GR
  }
}
\author{
Lukasz Jan Kielpinski
}
\references{
%% ~put references to the literature/web site here ~
}
\seealso{
\code{\link{norm2bedgraph}}, \code{\link{GR2norm_df}}, \code{\link{plotRNA}},
\code{\link{BED2txDb}}, \code{\link{dtcr}}, \code{\link{slograt}}, \code{\link{swinsor}},
\code{\link{compdata}}
}
\keyword{~kwd1}
\keyword{~kwd2}

