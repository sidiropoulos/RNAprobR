% Generated by roxygen2 (4.0.2): do not edit by hand
\name{dtcr}
\alias{dtcr}
\title{Function to calculate deltaTCR.}
\usage{
dtcr(control_GR, treated_GR, window_size = 3, nt_offset = 1,
  bring_to_zero = TRUE, add_to)
}
\arguments{
\item{control_GR}{GRanges object made by comp() function from the control
sample.}

\item{treated_GR}{GRanges object made by comp() function from the treated
sample.}

\item{window_size}{if smoothing is to be performed, then what should be the
window size?  (use only odd numbers to ensure that windows are centred on a
nucleotide of interest) (default: 3)}

\item{nt_offset}{how many nucleotides before modification the reverse
transcription terminates. E.g. for HRF-Seq nt_offset=1 (default: 1)}

\item{bring_to_zero}{should in deltaTCR calculations negative deltaTCR's be
brought to 0 as was done in HRF-Seq paper (default: T)}

\item{add_to}{GRanges object made by other normalization function (dtcr(),
slograt(), swinsor(), compdata()) to which normalized values should be
added.}
}
\value{
GRanges object with "dtcr" (deltaTCR) and "dtcr.p" (p.value of
comparing control and treated) metadata.
}
\description{
Performs deltaTCR (dtcr) calculation given control and treated GRanges
generated by comp() function.
}
\details{
%% ~~ If necessary, more details than the description above ~~
}
\note{
%% ~~further notes~~
}
\examples{
dummy_euc_GR_control <- GRanges(seqnames="DummyRNA", IRanges(start=round(runif(100)*100), width=round(runif(100)*100+1)), strand="+", EUC=round(runif(100)*100))
dummy_euc_GR_treated <- GRanges(seqnames="DummyRNA", IRanges(start=round(runif(100)*100), width=round(runif(100)*100+1)), strand="+", EUC=round(runif(100)*100))
dummy_comp_GR_control <- comp(dummy_euc_GR_control)
dummy_comp_GR_treated <- comp(dummy_euc_GR_treated)
dtcr(control_GR=dummy_comp_GR_control, treated_GR=dummy_comp_GR_treated)


## The function is currently defined as
function (control_GR, treated_GR, window_size = 3, nt_offset = 1,
    bring_to_zero = TRUE, add_to)
{
    if (nt_offset < 0) {
        stop("error: nt_offset must be >= 0")
    }
    if (window_size < 0) {
        stop("error: window_size must be >= 0")
    }
    if ((window_size\%\%2) != 1) {
        stop("error: window_size must be odd")
    }
    correct_merged <- function(oneRNA_compmerg) {
        df_gaps <- diff(oneRNA_compmerg$Pos)
        rnaid_column <- which(names(oneRNA_compmerg) == "RNAid")
        oneRNA_out <- oneRNA_compmerg[c(rep(1:length(df_gaps),
            df_gaps), nrow(oneRNA_compmerg)), ]
        oneRNA_out[duplicated(rep(1:length(df_gaps), df_gaps)),
            (1:ncol(oneRNA_out))[-rnaid_column]] <- NA
        oneRNA_out$Pos <- oneRNA_compmerg$Pos[1]:(oneRNA_compmerg$Pos[1] +
            nrow(oneRNA_out) - 1)
        oneRNA_out$nt[is.na(oneRNA_out$nt)] <- "N"
        oneRNA_out[is.na(oneRNA_out)] <- 0
        return(oneRNA_out)
    }
    compare_prop <- function(T_ctrl, C_ctrl, T_tr, C_tr, window_size) {
        window_side <- window_size/2 - 0.5
        Tc <- colSums(construct_smoothing_matrix(T_ctrl, window_size),
            na.rm = TRUE)[(window_side + 1):(length(T_ctrl) + window_side)]
        Cc <- colSums(construct_smoothing_matrix(C_ctrl, window_size),
            na.rm = TRUE)[(window_side + 1):(length(C_ctrl) + window_side)]
        Tt <- colSums(construct_smoothing_matrix(T_tr, window_size),
            na.rm = TRUE)[(window_side + 1):(length(T_tr) + window_side)]
        Ct <- colSums(construct_smoothing_matrix(C_tr, window_size),
            na.rm = TRUE)[(window_side + 1):(length(C_tr) + window_side)]
        pp <- (Tc + Tt)/(Cc + Ct)
        se <- sqrt(pp * (1 - pp) * (1/Cc + 1/Ct))
        z <- (Tc/Cc - Tt/Ct)/se
        p.values <- pnorm(abs(z), lower.tail = FALSE) * 2
        return(p.values)
    }
    process_oneRNA_compmerg <- function(oneRNA_compmerg) {
        if (prod(diff(oneRNA_compmerg$Pos) == rep(1, nrow(oneRNA_compmerg) -
            1)) != 1) {
            oneRNA_compmerg <- correct_merged(oneRNA_compmerg)
        }
        if (prod(diff(oneRNA_compmerg$Pos) == rep(1, nrow(oneRNA_compmerg) -
            1)) == 1) {
            oneRNA_compmerg$dtcr <- moving_average(oneRNA_compmerg$dtcr,
                window_size)[(1 + nt_offset):(nrow(oneRNA_compmerg) +
                nt_offset)]
            oneRNA_compmerg$dtcr.p <- compare_prop(T_ctrl = oneRNA_compmerg$TC.control,
                C_ctrl = oneRNA_compmerg$Cover.control, T_tr = oneRNA_compmerg$TC.treated,
                C_tr = oneRNA_compmerg$Cover.treated, window_size = window_size)[(1 +
                nt_offset):(nrow(oneRNA_compmerg) + nt_offset)]
            return(oneRNA_compmerg[1:(nrow(oneRNA_compmerg) -
                nt_offset), ])
        }
        else {
            print(paste("Check if data was properly sorted by comp() function. Problem with",
                oneRNA_compmerg$RNAid[1]))
            stop()
        }
    }
    control <- GR2norm_df(control_GR)
    treated <- GR2norm_df(treated_GR)
    comp_merg <- merge(control, treated, by = c("RNAid", "Pos",
        "nt"), all = TRUE, suffixes = c(".control", ".treated"))
    comp_merg <- comp_merg[order(comp_merg$RNAid, comp_merg$Pos),
        ]
    comp_merg[is.na(comp_merg)] <- 0
    dtcr <- (comp_merg$TCR.treated - comp_merg$TCR.control)/(1 -
        comp_merg$TCR.control)
    if (bring_to_zero) {
        dtcr[dtcr < 0] <- 0
    }
    else {
        dtcr[dtcr == -Inf] <- NA
    }
    comp_merg$dtcr <- dtcr
    compmerg_by_RNA <- split(comp_merg, f = comp_merg$RNAid,
        drop = TRUE)
    normalized <- do.call(rbind, lapply(compmerg_by_RNA, FUN = process_oneRNA_compmerg))
    normalized <- data.frame(RNAid = normalized$RNAid, Pos = normalized$Pos,
        nt = normalized$nt, dtcr = normalized$dtcr, dtcr.p = normalized$dtcr.p)
    normalized$dtcr[is.nan(normalized$dtcr)] <- NA
    normalized$dtcr.p[is.nan(normalized$dtcr.p)] <- NA
    if (!missing(add_to)) {
        add_to_df <- GR2norm_df(add_to)
        normalized <- merge(add_to_df, normalized, by = c("RNAid",
            "Pos", "nt"), suffixes = c(".old", ".new"))
    }
    normalized <- normalized[order(normalized$RNAid, normalized$Pos),
        ]
    normalized_GR <- norm_df2GR(normalized)
    normalized_GR
  }
}
\author{
Lukasz Jan Kielpinski
}
\references{
Kielpinski, L.J., and Vinther, J. (2014). Massive
parallel-sequencing-based hydroxyl radical probing of RNA accessibility.
Nucleic Acids Res.
}
\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\keyword{~kwd1}
\keyword{~kwd2}

